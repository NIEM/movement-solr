<dataConfig>
  <dataSource  type="FileDataSource" encoding="US-ASCII" />

  <script> <![CDATA[

    function getNamespaceInfo(row) {

      var domainLookup = {
        biometrics: 'Biometrics',
        cbrn: 'Chemical, Biological, Radiological, Nuclear',
        cyfs: 'Children, Youth & Family Services',
        emergencyManagement: 'Emergency Management',
        humanServices: 'Human Services',
        immigration: 'Immigration',
        infrastructureProtection: 'Infrastructure Protection',
        intelligence: 'Intelligence',
        internationalTrade: 'International Trade',
        jxdm: 'Justice',
        maritime: 'Maritime',
        militaryOperations: 'Military Operations',
        screening: 'Screening',
        surfaceTransportation: 'Surface Transportation'
      };

      var namespaceLookup = {
        'aamva_d20': 'aamva_d20',
        'apco_event': 'apco',
        'atf': 'atf',
        'canada_post': 'can',
        'cbrncl': 'cbrncl',
        'ogc': 'ogc',
        'fbi_ndex': 'ndex',
        'have': 'have',
        'mmucc': 'mmucc',
        'fbi_ncic': 'ncic',
        'fbi_ucr': 'ucr',
        'it_': 'itcodes',
        'edxl_have': 'have-codes',
        'core_misc': 'core_misc',
        'unece_rec20': 'unece',
        'de': 'de',
        'census_commodity': 'commodity',
        'jp3-52': 'jp3-52',
        'pmise_sar': 'sar',
        'dea_ctlsub': 'dea',
        'nlets': 'nlets',
        'jc3iedm': 'jc3iedm',
        'edxl_rm': 'edxl_rm',
        'fips_5-2': 'fips_5-2',
        'nga_datum': 'nga',
        'occs_facility': 'occs',
        'cap': 'cap',
        'dod_jcs-pub2.0': 'dod_jcs-pub2.0',
        'fips_10-4': 'fips_10-4',
        'nga_genc': 'genc',
        'hl7': 'hl7',
        'iso_3166-1': 'iso_3166',
        'iso_4217': 'iso_4217',
        'usps_states': 'usps',
        'xCard': 'xCard',
        'census_uscounty': 'census',
        'dol_soc': 'dol',
        'dot_hazmat': 'hazmat',
        'fips_6-4': 'fips_6-4',
        'iso_639-3': 'iso639-3',
        'proxy': 'niem-xs',
        'geospatial': 'geo',
        'structures': 'structures',
        'edxl-cap': 'edxl-cap',
        'edxl-de': 'edxl-de',
        'edxl-have': 'edxl-have',
        'biometrics': 'biom',
        'cbrn': 'cbrn',
        'cyfs': 'cyfs',
        'emergencyManagement': 'em',
        'humanServices': 'hs',
        'immigration': 'im',
        'infrastructureProtection': 'ip',
        'intelligence': 'intel',
        'internationalTrade': 'it',
        'jxdm': 'j',
        'maritime': 'm',
        'militaryOperations': 'mo',
        'screening': 'scr',
        'surfaceTransportation': 'st',
        'Core': 'nc'
      }

      var path = row.get("fileAbsolutePath");
      var pathSlash = path.replace(/\\/g,"/");
      var namespaceType;
      var namespace;
      var domain;
      var externalStandard;
      var otherNamespace;
      var namespacePriority;
      var namespacePrefix;

      // Determine if file is in domains dir or niem-core
      if (path.indexOf('domains') > -1) {
        namespaceType = 'domain';

        // Loop through domainLookup object to find match
        Object.keys(domainLookup).forEach(function(key) {
          if (path.indexOf(key) > -1) {
            domain = domainLookup[key];
            namespacePrefix = namespaceLookup[key];
          }
        });

        namespace = domain;
        namespacePriority = 2;

      } else if ( path.indexOf('niem-core') > -1) {
        namespaceType = 'domain';
        domain = 'Core';
        namespace = domain;
        namespacePrefix = namespaceLookup[namespace];
        namespacePriority = 1;
      } else if ( path.indexOf('codes') > -1 ) {
        namespaceType = 'externalStandard';
        externalStandard = pathSlash.split('codes/')[1].split('/')[0];
        namespace = externalStandard;
        namespacePrefix = namespaceLookup[namespace];
        namespacePriority = 3;
      } else if (path.indexOf('external') > -1) {
        namespaceType = 'externalStandard';
        externalStandard = pathSlash.split('external/')[1].split('/')[0];
        namespace = externalStandard;
        namespacePrefix = namespaceLookup[namespace];
        namespacePriority = 3;
      } else if( path.indexOf('adapters') > -1) {
        namespaceType = 'otherNamespace';
        otherNamespace = pathSlash.split('adapters/')[1].split('/')[0];
        namespace = otherNamespace;
        namespacePrefix = namespaceLookup[namespace];
        namespacePriority = 4;
      } else {
        namespaceType = 'otherNamespace';
        otherNamespace = pathSlash.split('niem-xsd/')[1].split('/')[0];
        namespace = otherNamespace;
        namespacePrefix = namespaceLookup[namespace];
        namespacePriority = 4;
      }

      if (domain) {
        row.put("domain", domain);
      } else if (externalStandard) {
        row.put("externalStandard", externalStandard);
      } else if (otherNamespace) {
        row.put("otherNamespace", otherNamespace);
      }

      row.put("namespace", namespace);
      row.put("namespaceType", namespaceType);
      row.put("namespacePrefix", namespacePrefix);
      row.put("namespacePriority", namespacePriority);

      return row;

    };


    function getFacetList(row) {

      var columns = row.keySet().toArray();

      var facetsObject = {};

      for (var c = 0; c < columns.length; c++) {
        var columnName = columns[c];

        if (columnName.toLowerCase().contains('facet')) {

          var value = row.get(columnName);

          if (value !== null && value.contains(null) === false) {

            var facetName = columnName.split('_')[1];
            var facetKey = columnName.split('_')[0];

            if (facetName in facetsObject === false) {
              facetsObject[facetName] = {};
            }

            facetsObject[facetName][facetKey] = value.toString();

            row.remove(columnName);

          }
        }

      }

      var facetString = JSON.stringify(facetsObject);
      row.put("facets", facetString);

      return row;
    };

    function getContentStyle(row) {

      var contentStyle;
      var complexContent = row.get("complexContent");
      var simpleContent = row.get("simpleContent")

      if (complexContent) {
        contentStyle = 'Complex with Complex Content (CCC)';
      } else if (simpleContent) {
        contentStyle = 'Complex with Simple Content (CSC)';
      }

      row.put("contentStyle", contentStyle);

      return row;
    };

  ]]>
  </script>

  <document>

    <!-- this outer processor generates a list of files satisfying the conditions specified in the attributes -->
    <entity name="f"
            processor="FileListEntityProcessor"
            fileName=".*xsd"
            recursive="true"
            rootEntity="false"
            dataSource="null"
            excludes="appinfo.xsd|conformanceTargets.xsd|localTerminology.xsd|gmx.xsd"
            onError="skip"
            transformer="script:getNamespaceInfo,TemplateTransformer"
            baseDir="/opt/solr/niem-xsd">

      <!-- the inner processors extract content using Xpath from each file found -->
      <entity name="element"
              url="${f.fileAbsolutePath}"
              processor="XPathEntityProcessor"
              stream="true"
              transformer="TemplateTransformer"
              forEach="/schema/element" >

        <field column ="id"               template="${f.namespacePrefix}:${element.name}" />
        <field column="name"              xpath="/schema/element/@name"                        boost="5.0" />
        <field column="entityType"        template="Element" />
        <field column="definition"        xpath="/schema/element/annotation/documentation" />
        <field column="type"              xpath="/schema/element/@type" />
        <field column="abstract"          xpath="/schema/element/@abstract" />
      </entity>


      <entity name="complexType"
              url="${f.fileAbsolutePath}"
              processor="XPathEntityProcessor"
              stream="true"
              transformer="TemplateTransformer,script:getContentStyle"
              forEach="/schema/complexType" >

        <field column ="id"               template="${f.namespacePrefix}:${complexType.name}" />
        <field column="name"              xpath="/schema/complexType/@name"                        boost="5.0" />
        <field column="definition"        xpath="/schema/complexType/annotation/documentation" />
        <field column="entityType"        template="Type" />

        <field column="complexContent"    xpath="/schema/complexType/complexContent" />
        <field column="simpleContent"     xpath="/schema/complexType/simpleContent" />

        <!-- For CCC -->
        <field column="parentTypeName"    xpath="/schema/complexType/complexContent/extension/@base" />
        <field column="elements"          xpath="/schema/complexType/complexContent/extension/sequence/element/@ref" />

        <!-- For CSC -->
        <field column="parentSimpleType"  xpath="/schema/complexType/simpleContent/extension/@base" />
      </entity>


      <entity name="simpleType"
              url="${f.fileAbsolutePath}"
              processor="XPathEntityProcessor"
              stream="true"
              transformer="script:getFacetList,TemplateTransformer"
              forEach="/schema/simpleType" >


        <field column ="id"           template="${f.namespacePrefix}:${simpleType.name}" />
        <field column="name"          xpath="/schema/simpleType/@name"                        boost="5.0" />
        <field column="definition"    xpath="/schema/simpleType/annotation/documentation" />
        <field column="entityType"    template="Type" />

        <field column="facetValue_enumeration"        xpath="/schema/simpleType/restriction/enumeration/@value" />
        <field column="facetValue_minInclusive"       xpath="/schema/simpleType/restriction/minInclusive/@value" />
        <field column="facetValue_maxInclusive"       xpath="/schema/simpleType/restriction/maxInclusive/@value" />
        <field column="facetValue_minExclusive"       xpath="/schema/simpleType/restriction/minExclusive/@value" />
        <field column="facetValue_maxExclusive"       xpath="/schema/simpleType/restriction/maxExclusive/@value" />
        <field column="facetValue_minLength"          xpath="/schema/simpleType/restriction/minLength/@value" />
        <field column="facetValue_maxLength"          xpath="/schema/simpleType/restriction/maxLength/@value" />
        <field column="facetValue_pattern"            xpath="/schema/simpleType/restriction/pattern/@value" />
        <field column="facetValue_totalDigits"        xpath="/schema/simpleType/restriction/totalDigits/@value" />

        <field column="facetDefinition_enumeration"        xpath="/schema/simpleType/restriction/enumeration/annotation/documentation" />
        <field column="facetDefinition_minInclusive"       xpath="/schema/simpleType/restriction/minInclusive/annotation/documentation" />
        <field column="facetDefinition_maxInclusive"       xpath="/schema/simpleType/restriction/maxInclusive/annotation/documentation" />
        <field column="facetDefinition_minExclusive"       xpath="/schema/simpleType/restriction/minExclusive/annotation/documentation" />
        <field column="facetDefinition_maxExclusive"       xpath="/schema/simpleType/restriction/maxExclusive/annotation/documentation" />
        <field column="facetDefinition_minLength"          xpath="/schema/simpleType/restriction/minLength/annotation/documentation" />
        <field column="facetDefinition_maxLength"          xpath="/schema/simpleType/restriction/maxLength/annotation/documentation" />
        <field column="facetDefinition_pattern"            xpath="/schema/simpleType/restriction/pattern/annotation/documentation" />
        <field column="facetDefinition_totalDigits"        xpath="/schema/simpleType/restriction/totalDigits/annotation/documentation" />

      </entity>

    </entity>

  </document>
</dataConfig>
